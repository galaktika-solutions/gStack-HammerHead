# -*- coding: utf-8 -*-
#
# gstack documentation build configuration file, created by
# sphinx-quickstart on Thu May 11 09:27:37 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import os
import sphinx_rtd_theme
import inspect
import django
from django.utils.html import strip_tags
from django.utils.encoding import force_text
from django.db import models, connection
from rest_framework.routers import SimpleRouter
from rest_framework import serializers
django.setup()

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.todo'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = os.environ.get('COMPOSE_PROJECT_NAME')
copyright = '2018, Galaktika Solutions'
author = 'Galaktika Solutions'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = os.environ.get('VERSION')
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = 'bizstyle'

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_context = {
    'css_files': [
        '_static/css/extra.css'
    ],
    'script_files': [
        '_static/js/collapse.js',
        '_static/js/main.js'
    ],
    'theme_logo_only': True
}

html_favicon = '_static/img/favicon.ico'
html_logo = '_static/img/logo.png'
theme_logo_only = True

# -- Options for HTMLHelp output ------------------------------------------
# Output file base name for HTML help builder.
htmlhelp_basename = project + 'doc'


# -- Options for LaTeX output ---------------------------------------------
latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [(
    master_doc,
    project + '.tex',
    project + 'Documentation',
    'Galaktika Solutions',
    'manual'),
]


# -- Options for manual page output ---------------------------------------
# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(
    master_doc,
    project + '.tex',
    project + 'Documentation',
    [author],
    1)
]


# -- Options for Texinfo output -------------------------------------------
# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [(
    master_doc,
    project + '.tex',
    project + 'Documentation',
    author,
    project,
    'One line description of project.',
    'Miscellaneous'),
]

autodoc_default_flags = ['members', 'special-members']
autodoc_member_order = 'bysource'


def process_docstring(app, what, name, obj, options, lines):
    if what == 'data':
        # url processor
        if isinstance(obj, list) and '.urlpatterns' in name:
            # I don't know why but I have to set it to empty otherwise it won't
            # use my costum lines
            lines[0] = ''
            lines[1] = ''
            template = '* :class:`%s` at ``%s``'
            for item in obj:
                lines.append(template % (item.lookup_str, item.regex.pattern))
            obj = []
        # SimpleRouter processor
        elif isinstance(obj, SimpleRouter):
            template = '* :meth:`%s.%s` at ``%s``'
            for item in obj.urls:
                lines.append(template % (
                    item.lookup_str,
                    '_'.join(item.name.split('-')[1:]),
                    item.regex.pattern)
                )
        # auditlog app register processor
        elif isinstance(obj, list) and '.apps.models_to_register' in name:
            # I don't know why but I have to set it to empty otherwise it won't
            # use my costum lines
            lines[0] = ''
            lines[1] = ''

            for item in obj:
                if item[1] == []:
                    template = '* :class:`%s.models.%s` **exclude nothing**'
                    lines.append(template % (
                        name.split('.apps.models_to_register')[0], item[0]))
                else:
                    lines.append('* :class:`%s.models.%s` **exclude**: ' % (
                        name.split('.apps.models_to_register')[0], item[0]))
                    lines.append('   .. hlist::')
                    lines.append('      :columns: 3')
                    lines.append('')
                    for text in item[1]:
                        lines.append("      * ``%s``" % text)
                    lines.append('')
            obj = []
        return

    # ModelSerializer processor
    if inspect.isclass(obj) and issubclass(obj, serializers.ModelSerializer):
        lines.append('* Model: :class:`%s.%s` **fields**: ' % (
            obj.Meta.model.__module__, obj.Meta.model.__name__
        ))
        lines.append('   .. hlist::')
        lines.append('      :columns: 3')
        lines.append('')
        for text in obj.Meta.fields:
            lines.append("      * ``%s``" % text)
        lines.append('')
        return

    # Only look at objects that inherit from Django's base model class
    elif not inspect.isclass(obj) or not issubclass(obj, models.Model):
        return

    def field_desc(name, data_type, verbose, help_text, related, db,
                   field=None):
        if data_type:
            template = ' - | :attr:`%s` -- *%s* -- %s'
            lines.append(template % (name, data_type, verbose))
        else:
            template = ' - | :attr:`%s` -- %s'
            lines.append(template % (name, verbose))

        if field and field.flatchoices:
            lines.append('   | **choices**:')
            for choice in field.flatchoices:
                lines.append("   |      ``%s`` -> %s" % (
                    choice[0], choice[1]))
        if help_text:
            help_text = help_text.replace("<b>", "**")
            help_text = help_text.replace("</b>", "**")
            lines.append('   | *help text*:')
            for line in help_text.split('<br/>'):
                lines.append('   |  %s' % line)
        if related:
            lines.append('   | *related*: %s' % related)
        if db:
            lines.append('   | *db*: %s' % db)

    def db_for_field(field):
        table = field.model._meta.db_table
        column = field.column
        db_type = field.db_type(connection)
        return '%s.%s(%s)' % (table, column, db_type)

    lines.append('')
    lines.append(':Fields:')

    # Gather fields/field descriptions.
    for field in obj._meta.fields:
        if isinstance(field, models.ForeignKey):
            model = field.remote_field.model
            model_ref = '%s.%s' % (model.__module__, model.__name__)
            data_type = None
            verbose = 'the related :attr:`%s <%s>` object' % (
                model._meta.label,
                model_ref,
            )
            accessor = field.remote_field.get_accessor_name()
            remote_field_repr = '%s.%s' % (model._meta.label, accessor)
            remote_field_ref = '%s.%s' % (model_ref, accessor)
            related = ':attr:`%s <%s>`' % (remote_field_repr, remote_field_ref)
        else:
            data_type = field.description % field.__dict__
            verbose = field.verbose_name
            related = None

        db = None
        if field.concrete:
            db = '``%s``' % db_for_field(field)
        # format help_text
        help_text = force_text(field.help_text)
        field_desc(
            field.name, data_type, verbose, help_text, related, db, field)

    if len(obj._meta.many_to_many) + len(obj._meta.related_objects):
        lines.append('')
        lines.append(':Related Fields:')

    # Gather many-to-many fields.
    for field in obj._meta.many_to_many:
        model = field.remote_field.model
        accessor = field.remote_field.get_accessor_name()
        label = model._meta.label
        model_ref = '%s.%s' % (model.__module__, model.__name__)
        data_type = None
        verbose = "related :attr:`%s <%s>` objects" % (label, model_ref)
        remote_field_repr = '%s.%s' % (label, accessor)
        remote_field_ref = '%s.%s' % (model_ref, accessor)
        related = ':attr:`%s <%s>`' % (remote_field_repr, remote_field_ref)
        db = None
        if field.concrete:
            m2m_field_name = field.m2m_field_name()
            m2m_field = field.rel.through._meta.get_field(m2m_field_name)
            db = '``%s``' % db_for_field(m2m_field)
        help_text = strip_tags(force_text(field.help_text))
        field_desc(field.name, data_type, verbose, help_text, related, db)

    # Gather related objects
    for rel in obj._meta.related_objects:
        model = rel.related_model
        accessor = rel.get_accessor_name()
        label = model._meta.label
        model_ref = '%s.%s' % (model.__module__, model.__name__)
        verbose = "related :attr:`%s <%s>` objects" % (label, model_ref)
        data_type = None
        help_text = None
        db = None
        if rel.remote_field.many_to_many:
            m2m_field_name = rel.remote_field.m2m_reverse_field_name()
            m2m_field = rel.through._meta.get_field(m2m_field_name)
            db = '``%s``' % db_for_field(m2m_field)
        remote_field_ref = '%s.%s' % (model_ref, rel.remote_field.name)
        related = ':attr:`%s <%s>`' % (rel.remote_field, remote_field_ref)
        field_desc(accessor, data_type, verbose, help_text, related, db)

    lines.append('')


def process_signature(
    app, what, name, obj, options, signature, return_annotation
):
    if inspect.isclass(obj) and issubclass(obj, serializers.ModelSerializer):
        return None, None

    if not inspect.isclass(obj) or not issubclass(obj, models.Model):
        return signature, return_annotation

    return None, None


def setup(app):
    app.connect('autodoc-process-docstring', process_docstring)
    app.connect('autodoc-process-signature', process_signature)
